package com.luv2code.ecommerce.config;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import javax.persistence.EntityManager;
import javax.persistence.metamodel.EntityType;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.rest.core.config.RepositoryRestConfiguration;
import org.springframework.data.rest.webmvc.config.RepositoryRestConfigurer;
import org.springframework.http.HttpMethod;

import com.luv2code.ecommerce.entity.Product;
import com.luv2code.ecommerce.entity.ProductCategory;

@Configuration
public class MyDataRestConfig implements RepositoryRestConfigurer {

	private EntityManager entityManager;

	@Autowired
	public MyDataRestConfig(EntityManager theEntityManager) {
		entityManager = theEntityManager;
	}

	@Override
	public void configureRepositoryRestConfiguration(RepositoryRestConfiguration config) {

		HttpMethod[] theUnsupportedActions = { HttpMethod.PUT, HttpMethod.DELETE, HttpMethod.POST };

		// disable HTTP methods for Product: PUT, POST, DELETE

		disableHttpMethods(Product.class, config, theUnsupportedActions);

		// disable HTTP methods for ProductCategory: PUT, POST, DELETE

		disableHttpMethods(ProductCategory.class, config, theUnsupportedActions);
		
		// disable HTTP methods for State: PUT, POST, DELETE

		disableHttpMethods(State.class, config, theUnsupportedActions);
		
		// disable HTTP methods for Country: PUT, POST, DELETE

		disableHttpMethods(Country.class, config, theUnsupportedActions);

		// call an internal helper method
		
		exposeIds(config);

	}
	
	private void exposeIds(RepositoryRestConfiguration config) {
		
		// expose entity ids
		//
		// get a list of all entity classes from the entity manager
		
		Set<EntityType<?>> entities = entityManager.getMetamodel().getEntities();
		
		// create an array of the entity types
		
		List<Class> entityClasses= new ArrayList<>();
		
		// get the entity types for the entities
		
		for (EntityType entityType : entities) {
			entityClasses.add(entityType.getJavaType());
		}
		
		// expose the entity ids for the array of entity/domain types
		
		Class[] domainTypes = entityClasses.toArray(new Class[0]);
		config.exposeIdsFor(domainTypes);
	}
	
	private void disableHttpMethods(Class theClass, RepositoryRestConfiguration config, HttpMethod[] theUnsupportedActions) {
		
		config.getExposureConfiguration().forDomainType(theClass)
		.withItemExposure((metdata, HttpMethods) -> HttpMethods.disable(theUnsupportedActions))
		.withCollectionExposure((metdata, HttpMethods) -> HttpMethods.disable(theUnsupportedActions));
	}

}
